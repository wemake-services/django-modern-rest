[build-system]
requires = ["poetry-core>=2.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "django-modern-rest"
description = "Modern REST framework for Django with types and async support"
license = "MIT"
version = "0.1.0"

authors = [
  "Nikita Sobolev <mail@sobolevn.me>",
  "Alexander Kondratev <mail@kondratev.dev>",
  # TODO: add Alexey
]

readme = "README.md"

repository = "https://github.com/wemake-services/django-modern-rest"

keywords = [
  "django",
  "django plugin",
  "djangorestframework",
  "django-api",
  "API",
  "REST",
  "wemake-python-package",
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
]

include = ["django_modern_rest_pytest.py"]


[tool.poetry.dependencies]
python = "^3.11"
typing_extensions = ">=4"

# Default dependency, since we use it for json parsing:
msgspec = ">= 0.19"

pydantic = { version = "^2.12", optional = true }

[tool.poetry.extras]
pydantic = ["pydantic"]

[tool.poetry.group.dev.dependencies]
django = ">=4.2,<6.0"
django-stubs = { version = "5.2.7", extras = ["compatible-mypy"] }
pyright = "^1.1"

wemake-python-styleguide = "^1.4"
ruff = "^0.14"

pytest = "^8.4"
pytest-cov = "^7.0"
covdefaults = "^2.3"
pytest-randomly = "^4.0"
pytest-django = "^4.8"
pytest-asyncio = "^1.2"
dirty-equals = "^0.10"
faker = "^37.11"
inline-snapshot = "^0.29"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^8.1"
sphinx-autodoc-typehints = "^3.0"
tomli = "^2.2"
myst-parser = "^4.0"
furo = "^2025.9"


[tool.poetry.plugins."pytest11"]
# We need this structure because otherwise `pytest` ruins the coverage report.
# This happens because we have imports in `django_modern_rest/__init__.py`
django_modern_rest = "django_modern_rest_pytest"


[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
preview = true
fix = true
target-version = "py311"
line-length = 80

[tool.ruff.format]
quote-style = "single"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "D418",  # We should be able to add docstrings to `@overload` decorators
  # TODO: re-enable when ready:
  "D103", "D102", "D101", "D107",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

# For `django_test_app` only:
isort.known-first-party = ["rest_app"]

[tool.ruff.lint.per-file-ignores]
# Do not require docstrings in test project:
"django_test_app/**/*.py" = ["D10"]
# Allow asserts for tests:
"tests/*.py" = ["S101"]


[tool.pytest.ini_options]
# Django options:
# https://pytest-django.readthedocs.io/en/latest/
DJANGO_SETTINGS_MODULE = "django_test_app.settings"

# pytest config: http://doc.pytest.org/en/latest/customize.html

# Strict `@xfail` by default:
xfail_strict = true
# Fail on warnings:
filterwarnings = ["error"]

# PYTHONPATH configuration:
pythonpath = ["django_test_app"]

addopts = [
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  # Output:
  "--tb=short",
  # Coverage:
  "--cov=django_modern_rest",
  "--cov=django_test_app",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=html",
  "--cov-report=xml",
  "--cov-branch",
  "--cov-fail-under=98.9",  # TODO: set to 100%
  # Ignores:
  "--ignore=docs",
  "--ignore=typesafety/assert_type",
]


# Covdefaults: https://pypi.org/project/covdefaults
[tool.coverage.run]
plugins = ["covdefaults"]


[tool.mypy]
# The mypy configurations: http://bit.ly/2zEl9WI
ignore_missing_imports = true
strict = true
strict_bytes = true
local_partial_types = true
warn_unreachable = true

enable_error_code = [
  "truthy-bool",
  "truthy-iterable",
  "redundant-expr",
  "unused-awaitable",
  "ignore-without-code",
  "possibly-undefined",
  "redundant-self",
  "explicit-override",
  "mutable-override",
  "unimported-reveal",
  "deprecated",
]

plugins = [
  "pydantic.mypy",
]


[tool.pyright]
# Docs: https://microsoft.github.io/pyright/#/configuration
include = ["django_modern_rest", "typesafety", "tests"]
strict = ["django_modern_rest/**/*"]
pythonVersion = "3.11"
venvPath = "."
venv = ".venv"
